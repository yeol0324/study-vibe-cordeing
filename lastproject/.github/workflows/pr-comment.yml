name: PR 자동 댓글

on:
  pull_request:
    types: [opened, reopened]

jobs:
  pr-comment:
    runs-on: ubuntu-latest
    
    steps:
    - name: PR 웰컴 댓글 추가
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const author = context.payload.pull_request.user.login;
          
          const welcomeMessage = `
          ## 🎉 PR이 생성되었습니다!
          
          안녕하세요 @${author}님! PR을 생성해주셔서 감사합니다.
          
          ### ✅ PR 체크리스트
          리뷰 전에 다음 사항들을 확인해 주세요:
          
          - [ ] 코드가 프로젝트의 코딩 스타일을 따르나요?
          - [ ] 테스트가 모두 통과하나요?
          - [ ] 새로운 기능에 대한 테스트를 추가했나요?
          - [ ] 문서가 업데이트되었나요? (필요한 경우)
          - [ ] 브레이킹 체인지가 있다면 명시했나요?
          
          ### 🔍 자동 체크 진행 사항
          - 자동 테스트가 실행 중입니다
          - 코드 품질 검사가 진행됩니다
          - 리뷰어가 자동으로 할당됩니다
          
          ### 📝 추가 정보
          - 질문이 있으시면 언제든지 댓글로 남겨주세요
          - 리뷰 과정에서 변경 요청이 있을 수 있습니다
          - 모든 체크가 완료되면 머지가 가능합니다
          
          좋은 코드 기여해주셔서 감사합니다! 🚀
          `;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: welcomeMessage
          });

  pr-test-result-comment:
    runs-on: ubuntu-latest
    needs: []
    if: always()
    
    steps:
    - name: 테스트 결과 댓글 추가
      uses: actions/github-script@v7
      with:
        script: |
          // 테스트 워크플로우 결과를 기다리고 댓글 추가
          const prNumber = context.payload.pull_request?.number;
          if (!prNumber) return;
          
          // 잠시 대기 후 테스트 상태 확인
          await new Promise(resolve => setTimeout(resolve, 30000));
          
          const { data: checkRuns } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
          });
          
          const testResults = checkRuns.check_runs
            .filter(run => run.name.includes('test'))
            .map(run => `- ${run.name}: ${run.conclusion || 'in_progress'}`)
            .join('\n');
          
          if (testResults) {
            const testComment = `
            ## 🧪 테스트 결과 업데이트
            
            ${testResults}
            
            ${checkRuns.check_runs.some(run => run.conclusion === 'failure') 
              ? '❌ 일부 테스트가 실패했습니다. 코드를 수정해 주세요.' 
              : checkRuns.check_runs.every(run => run.conclusion === 'success')
              ? '✅ 모든 테스트가 통과했습니다!'
              : '⏳ 테스트가 진행 중입니다...'}
            `;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testComment
            });
          } 